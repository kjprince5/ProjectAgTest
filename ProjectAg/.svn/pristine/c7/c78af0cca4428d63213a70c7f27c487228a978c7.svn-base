package com.valforma.projectag.helper;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.valforma.projectag.common.util.JobException;
import com.valforma.projectag.common.util.JsonUtil;
import com.valforma.projectag.contracts.ObjectHolder;
import com.valforma.projectag.model.IntegrationInstanceFailure;
import com.valforma.projectag.model.JobDetail;
import com.valforma.projectag.model.Step;
import com.valforma.projectag.model.StepHistory;
import com.valforma.projectag.model.StepHistory.Status;
import com.valforma.projectag.model.StepSettings;
import com.valforma.projectag.model.StepUniqueRecord;
import com.valforma.projectag.service.IntegrationInstanceFailureService;
import com.valforma.projectag.service.StepHistoryService;
import com.valforma.projectag.service.StepSettingsService;
import com.valforma.projectag.service.StepUniqueRecordService;

@Component
public class RestStepProcessor implements StepProcessor {

	@Autowired
	TemplateParser templateParser;

	@Autowired
	IntegrationInstanceFailureService integrationInstanceFailureService;

	@Autowired
	StepHistoryService stepHistoryService;

	@Autowired
	NashornHelper nashornHelper;

	@Autowired
	StepUniqueRecordService stepUniqueRecordService;

	@Autowired
	ClientTranslationHelper clientTranslationHelper;

	@Autowired
	StepSettingsService stepSettingsService;

	ObjectMapper mapper = new ObjectMapper();

	@SuppressWarnings("unchecked")
	@Override
	public Object processStep(JobDetail jobDetail, Step step, ObjectHolder objectHolder, Integer level)
			throws JobException {
		System.out.println(JsonUtil.toString(objectHolder));
		if (step.getDryRunResponse() == null || step.getDryRunResponse().isEmpty() || !objectHolder.isDryRun()) {
			RestTemplate restTemplate = new RestTemplate();
			Object genericRequest = new Object();
			Object genericReponse = new Object();
			Object genericHeader = new Object();

			StepSettings stepSettings = new StepSettings();
			stepSettings.setStepId(step.getId());
			stepSettings.setClientId(step.getClientId());
			List<StepSettings> stepSettingsList = stepSettingsService.getListByCriteria(stepSettings, -1, 0);
			/*System.out.println( objectHolder.getConfigs().get("0").getValues());*/
			try {
				clientTranslationHelper.fillTranslatorObject(step, stepSettingsList, objectHolder, level);
			} catch (TranslatorNotFoundException e) {
				if (step.isLoggingEnabled()) {
					saveStepHistory(step, objectHolder, genericRequest, e.getMessage() + " : " + e.getTranslatorCode(),
							genericHeader, Status.FAILURE);
					failOverHandler(jobDetail, true, step, objectHolder, null,
							e.getMessage() + " : " + e.getTranslatorCode(), level);
				}
				return null;
			}
			try {

				if (step.isDuplicateCheckEnabled()) {
					String stepUniqeKey = templateParser.parse(step.getClientId().toString(),
							"step_unique_key_" + step.getId().toString(), step.getUniqueKeyTemplate(), objectHolder);
					StepUniqueRecord stepUniqueRecord = new StepUniqueRecord();
					stepUniqueRecord.setStepId(step.getId());
					stepUniqueRecord.setUniqueKey(stepUniqeKey);
					if (stepUniqueRecordService.getCount(stepUniqueRecord) > 0) {
						if (step.isLoggingEnabled()) {
							saveStepHistory(step, objectHolder, genericRequest,
									"Didn't try rest, as its duplicate record:" + stepUniqeKey, genericHeader,
									Status.SUCCESS);
						}
						return null;
					}
				}

				if (step.getRequestValidator() != null && !step.getRequestValidator().trim().isEmpty()) {
					String err = (String) nashornHelper.process(step.getRequestValidator(), objectHolder, objectHolder);
					if (!err.isEmpty()) {
						if (step.isLoggingEnabled()) {
							saveStepHistory(step, objectHolder, genericRequest,
									"Didn't try rest, validation error:" + err, genericHeader, Status.SUCCESS);
						}
						return null;
					}
				}

				if (objectHolder.isDryRun()
						&& objectHolder.getConfigs().get("0").getValues().get("dryRunStepId").equals(step.getId())) {
					if (objectHolder.getConfigs().get("0").getValues().get("dryRunStepUniqueId") != null) {
						String stepUniqeKey = templateParser.parse(step.getClientId().toString(),
								"step_unique_key_" + step.getId().toString(), step.getUniqueKeyTemplate(),
								objectHolder);
						if (stepUniqeKey
								.equals(objectHolder.getConfigs().get("0").getValues().get("dryRunStepUniqueId"))) {
							return null;
						}
					}
				}

				LinkedHashMap<?, ?> headerMap = new LinkedHashMap<>();
				if (step.getHeaderTemplate() != null && !step.getHeaderTemplate().isEmpty()) {
					headerMap = mapper.readValue(templateParser.parse(step.getClientId().toString(),
							"header_" + step.getId().toString(), step.getHeaderTemplate(), objectHolder),
							LinkedHashMap.class);
				}

				HttpHeaders headers = new HttpHeaders();
				for (Map.Entry<?, ?> requestHeaderEntry : headerMap.entrySet()) {
					headers.add(requestHeaderEntry.getKey().toString(), requestHeaderEntry.getValue().toString());
				}
				HttpEntity<?> httpEntity = null;
				headers.setContentType(MediaType.valueOf(step.getSubType().split("\\|")[1]));

				StepSettings stepSettingsSearchForUserNameAndPassword = new StepSettings();
				stepSettingsSearchForUserNameAndPassword.setStepId(step.getId());
				stepSettingsSearchForUserNameAndPassword.setClientId(step.getClientId());
				List<StepSettings> stepSettingsListForUserNameAndPassword = stepSettingsService
						.getListByCriteria(stepSettings, -1, 0);
				if (!stepSettingsListForUserNameAndPassword.isEmpty()) {
					String auth = "USERNAME" + ":" + "PASSWORD";
					Boolean userNamePresent=false;
					Boolean passwordPresent=false;
					for (StepSettings stepSettings2 : stepSettingsListForUserNameAndPassword) {

						if (stepSettings2.getKey().equals("BASIC_AUTHORIZATION_USERNAME")) {
							auth = auth.replace("USERNAME", stepSettings2.getValue());
							userNamePresent=true;
						}
						if (stepSettings2.getKey().equals("BASIC_AUTHORIZATION_PASSWORD")) {
							auth = auth.replace("PASSWORD", stepSettings2.getValue());
							passwordPresent=true;
						}
					}

					if(userNamePresent && passwordPresent)
					{
						byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(Charset.forName("US-ASCII")));
						String authHeader = "Basic " + new String(encodedAuth);
						headers.set("Authorization", authHeader);
					}
					
				}

				MultiValueMap<String, String> mapRequest = new LinkedMultiValueMap<>();
				String request = "";
				if (step.getResponseFormatterJs() != null && !step.getResponseFormatterJs().trim().isEmpty()) {
					request = (String) nashornHelper.process(step.getResponseFormatterJs(), objectHolder, objectHolder);
					List<String> list = new ArrayList<>();
					list.add(request);
					mapRequest.put("data", list);
					request = "";
				}
				request = templateParser.parse(step.getClientId().toString(), "step_" + step.getId().toString(),
						step.getRequestTemplate(), objectHolder);
				System.out.println(request);
				if (headers.getContentType() == MediaType.APPLICATION_JSON) {
					httpEntity = new HttpEntity<String>(request, headers);
				} else if (headers.getContentType().equals(MediaType.APPLICATION_XML)) {
					httpEntity = new HttpEntity<String>(request, headers);
				} else if (headers.getContentType().equals(MediaType.TEXT_HTML)) {
					httpEntity = new HttpEntity<String>(request, headers);
				} else if (headers.getContentType().equals(MediaType.APPLICATION_FORM_URLENCODED)) {
					httpEntity = new HttpEntity<String>(request, headers);
					if (step.getRequestTemplate() == null || step.getRequestTemplate().isEmpty()) {
						httpEntity = new HttpEntity<MultiValueMap<String, String>>(mapRequest, headers);
					}
				} else {
					try {
						if (mapRequest != null && !request.isEmpty()) {
							mapRequest = mapper.readValue(request, LinkedMultiValueMap.class);
						}
					} catch (IOException e) {
						e.printStackTrace();
					}
					httpEntity = new HttpEntity<MultiValueMap<String, String>>(mapRequest, headers);
				}
				genericRequest = request;
				genericHeader = headers;
				if ("XML".equals(step.getResponseType()) || "CUSTOM_XML".equals(step.getResponseType())) {
					MappingJackson2XmlHttpMessageConverter one = new MappingJackson2XmlHttpMessageConverter();
					List<MediaType> mediaTypes = new ArrayList<>();
					mediaTypes.add(MediaType.TEXT_HTML);
					mediaTypes.add(MediaType.TEXT_XML);
					one.setSupportedMediaTypes(mediaTypes);
					restTemplate.getMessageConverters().add(one);
				} else if ("JSON".equals(step.getResponseType())) {
					MappingJackson2HttpMessageConverter one = new MappingJackson2HttpMessageConverter();
					List<MediaType> mediaTypes = new ArrayList<>();
					mediaTypes.add(MediaType.TEXT_HTML);
					one.setSupportedMediaTypes(mediaTypes);
					restTemplate.getMessageConverters().add(one);
				}
				ResponseEntity<?> object = null;
				if ("CUSTOM_XML".equals(step.getResponseType())) {
					object = restTemplate.exchange(
							templateParser.parse(step.getClientId().toString(),
									"step_path_template_" + step.getId().toString(), step.getPath(), objectHolder),
							HttpMethod.valueOf(step.getSubType().split("\\|")[0]), httpEntity, String.class);
				} else {
					object = restTemplate.exchange(
							templateParser.parse(step.getClientId().toString(),
									"step_path_template_" + step.getId().toString(), step.getPath(), objectHolder),
							HttpMethod.valueOf(step.getSubType().split("\\|")[0]), httpEntity, Object.class);
				}
				Object entityResponse = null;

				if ("CUSTOM_XML".equals(step.getResponseType())) {
					entityResponse = XmlToJsonConverter.convert(object.getBody().toString());
				} else {
					entityResponse = object.getBody();
				}

				if (object.getStatusCode() == HttpStatus.OK
						&& (step.getSuccessKey() == null || templateParser.parse(step.getClientId().toString(),
								"success_key_template_" + step.getId().toString(), step.getSuccessKey(), entityResponse)
								.equals(step.getSuccessValue()))) {

					if (step.isDuplicateCheckEnabled()) {
						String stepUniqeKey = templateParser.parse(step.getClientId().toString(),
								"step_unique_key_" + step.getId().toString(), step.getUniqueKeyTemplate(),
								objectHolder);
						StepUniqueRecord stepUniqueRecord = new StepUniqueRecord();
						stepUniqueRecord.setStepId(step.getId());
						stepUniqueRecord.setUniqueKey(stepUniqeKey);
						stepUniqueRecord.setClientId(step.getClientId());
						stepUniqueRecord.setCreationDate(new Date());
						stepUniqueRecord.setLastUpdateDate(new Date());
						stepUniqueRecordService.save(stepUniqueRecord);
					}
					if (objectHolder.getConfigs().get("0").getValues().containsKey("integrationInstanceFailureId")) {
						IntegrationInstanceFailure integrationInstanceFailure = integrationInstanceFailureService
								.get((BigInteger) objectHolder.getConfigs().get("0").getValues()
										.get("integrationInstanceFailureId"));
						if (step.getId().equals(objectHolder.getConfigs().get("0").getValues().get("failureStepId"))) {
							integrationInstanceFailureService.delete(integrationInstanceFailure.getId());

						}

					}
					if (step.isLoggingEnabled()) {
						genericReponse = entityResponse;
						saveStepHistory(step, objectHolder, genericRequest, genericReponse, genericReponse,
								Status.SUCCESS);
					}
					return genericReponse;
				} else {
					genericReponse = entityResponse;
					saveStepHistory(step, objectHolder, genericRequest, genericReponse, genericHeader, Status.FAILURE);
					failOverHandler(jobDetail, false, step, objectHolder, object.getBody(),
							"Validation Error from Rest:" + mapper.writeValueAsString(object.getBody()), level);

				}
			} catch (JobException e) {
				throw e;
			} catch (Throwable e) {

				e.printStackTrace();
				StringWriter sw = new StringWriter();
				PrintWriter pw = new PrintWriter(sw);
				e.printStackTrace(pw);
				genericReponse = sw.toString();
				saveStepHistory(step, objectHolder, genericRequest, genericReponse, genericHeader, Status.FAILURE);
				failOverHandler(jobDetail, true, step, objectHolder, null, sw.toString(), level);

			}
			return null;
		} else {
			LinkedHashMap<?, ?> map = null;
			try {
				map = mapper.readValue(step.getDryRunResponse(), LinkedHashMap.class);
			} catch (Exception e) {
				e.printStackTrace();
			}
			return map;
		}
	}

	private void saveStepHistory(Step step, ObjectHolder objectHolder, Object request, Object response, Object header,
			StepHistory.Status status) {
		StepHistory stepHistory = new StepHistory();
		stepHistory.setConfigObjectJson(JsonUtil.toString(objectHolder));
		stepHistory.setRequest(JsonUtil.toString(request));
		stepHistory.setResponse(JsonUtil.toString(response));
		stepHistory.setHeader(JsonUtil.toString(header));
		stepHistory.setStatus(status);
		stepHistory.setCreationDate(new Date());
		stepHistory.setLastUpdateDate(new Date());
		stepHistory.setStepId(step.getId());
		stepHistory.setClientId(step.getClientId());
		stepHistory.setJobId(step.getJobDetailId());
		stepHistory.setUniqueKeyTemplate(step.getUniqueKeyTemplate());
		stepHistoryService.save(stepHistory);
	}

	// public void fillTranslatorObject(Step step, List<StepSettings>
	// stepSettings, ObjectHolder objectHolder,
	// Integer level) {
	// Map<String, Map<String, Object>> converterMap = new HashMap<>();
	// for (StepSettings stepSettingsSingle : stepSettings) {
	// if (stepSettingsSingle.getKey().endsWith("_TRANSLATOR_TEMPLATE")) {
	// String stransaltorValues =
	// templateParser.parse(step.getClientId().toString(),
	// "STEP_SETTING_" + stepSettingsSingle.getId(),
	// stepSettingsSingle.getValue(), objectHolder);
	// for (String value : stransaltorValues.split(",")) {
	// String stepCode =
	// stepSettingsSingle.getKey().replace("_TRANSLATOR_TEMPLATE", "");
	// ClientTranslation stepTranslation = new ClientTranslation();
	// stepTranslation.setClientId(step.getClientId());
	// stepTranslation.setCode(stepCode);
	// stepTranslation.setKey(value);
	// stepTranslation =
	// clientTranslationService.getListByCriteria(stepTranslation, 0, 1).get(0);
	// if (converterMap.get(stepCode) == null) {
	// converterMap.put(stepCode, new HashMap<String, Object>());
	// }
	// converterMap.get(stepCode).put(stepTranslation.getKey(),
	// stepTranslation.getValue());
	// objectHolder.getConfigs().get("" + level).getTranslatorMap().put("" +
	// step.getSequence(),
	// converterMap);
	// }
	// }
	// }
	// }

	private void failOverHandler(JobDetail jobDetail, boolean serverSideExcepiton, Step step, ObjectHolder objectHolder,
			Object repsonseBody, String e, Integer level) throws JobException {

		if (jobDetail.isRetryEnabled()) {
			IntegrationInstanceFailure instanceFailureHistory = new IntegrationInstanceFailure();
			instanceFailureHistory.setJobDetailId(jobDetail.getId());
			Object nextStepRequest = repsonseBody;

			if (step.getErrorFormatterJs() != null && !step.getErrorFormatterJs().isEmpty()) {
				nextStepRequest = nashornHelper.process(step.getErrorFormatterJs(), objectHolder, repsonseBody);
			}
			objectHolder.getConfigs().get("" + level).getValues().put("" + step.getSequence(), nextStepRequest);

			String configObjectJson = null;
			String nextStepRequestJson = null;
			try {
				configObjectJson = mapper.writeValueAsString(objectHolder);
				nextStepRequestJson = mapper.writeValueAsString(nextStepRequest);
				mapper.writeValueAsString(repsonseBody);
			} catch (JsonProcessingException e1) {
				e1.printStackTrace();
			}

			if (objectHolder.getConfigs().get("0").getValues().containsKey("integrationInstanceFailureId")) {
				instanceFailureHistory = integrationInstanceFailureService.get((BigInteger) objectHolder.getConfigs()
						.get("0").getValues().get("integrationInstanceFailureId"));
				try {
					if (nextStepRequestJson.equals(
							mapper.writeValueAsString(objectHolder.getConfigs().get("0").getValues().get("0")))) {
						instanceFailureHistory.setNoOfRetries(instanceFailureHistory.getNoOfRetries() + 1);
					} else {
						instanceFailureHistory.setNoOfRetries(0);
					}
				} catch (JsonProcessingException e1) {
					e1.printStackTrace();
				}
			}
			instanceFailureHistory.setClientId(step.getClientId());
			instanceFailureHistory.setNextRequestJson(nextStepRequestJson);
			if (!(serverSideExcepiton
					&& objectHolder.getConfigs().get("0").getValues().containsKey("integrationInstanceFailureId"))) {
				instanceFailureHistory.setNextRequestJson(nextStepRequestJson);
			}

			instanceFailureHistory.setConfigObjectJson(configObjectJson);
			instanceFailureHistory.setCreationDate(new Date());
			instanceFailureHistory.setLastUpdateDate(new Date());
			instanceFailureHistory.setErrorResponse(e);
			instanceFailureHistory.setStepId(step.getId());
			integrationInstanceFailureService.update(instanceFailureHistory);
		}
		// throw new JobException("Error From Rest Step",e);
	}

}
