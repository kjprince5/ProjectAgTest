<?xml version="1.0" encoding="UTF-8" ?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
   xsi:schemaLocation="
    http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<http  use-expressions="false" pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request 
			parameters -->
		<custom-filter ref="clientCredentialsTokenEndpointFilter"
			after="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	<!--  <csrf disabled="true"/>  -->
		
	</http>

	<!--  This is where we tells spring security what URL should be protected 
		and what roles have access to them  -->
	<http  use-expressions="false"  pattern="/sweb/**" create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="true" />
		<!-- <intercept-url pattern="/sweb/**" access="ROLE_APP" /> -->
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		  <!-- <csrf disabled="true"/>   -->
	</http>
	
    <beans:bean id="httpSessionSecurityContextRepository" class='org.springframework.security.web.context.HttpSessionSecurityContextRepository'>
        <beans:property name='allowSessionCreation' value='false' />
    </beans:bean>

    <beans:bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
        <beans:constructor-arg ref="httpSessionSecurityContextRepository" />
    </beans:bean>

    <beans:bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <beans:constructor-arg>
            <beans:list>
                <filter-chain pattern="/sweb/**" filters="securityContextPersistenceFilter" xmlns="http://www.springframework.org/schema/security"/>
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>

	<beans:bean id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<beans:property name="realmName" value="test" />
	</beans:bean>

	<beans:bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<beans:property name="realmName" value="test/client" />
		<beans:property name="typeName" value="Basic" />
	</beans:bean>

	<beans:bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<beans:bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="clientAuthenticationManager" />
	</beans:bean>

	<beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
		xmlns="http://www.springframework.org/schema/beans:beans">
		<beans:constructor-arg>
			<beans:list>
				<beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
				<beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>
	
	
	

	<authentication-manager id="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>


	<!-- This is simple authentication manager, with a hardcoded user/password 
		combination. We can replace this with a user defined service to get few users 
		credentials from DB -->
	<authentication-manager alias="authenticationManager" 
		xmlns="http://www.springframework.org/schema/security" >
		<authentication-provider  ref="customUserAuthenticationProvider">
		 
			<!-- <user-service>
				<user name="beingjavaguys" password="spring@java" authorities="ROLE_APP" />
			</user-service> -->
		</authentication-provider>
	</authentication-manager>
	
	<beans:bean id="customUserAuthenticationProvider"
        class="com.valforma.iestate.oauth2.security.UserAuthenticationProvider">
    </beans:bean>

	<beans:bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="clientDetails" />
	</beans:bean>


	<!-- This defined token store, we have used inmemory tokenstore for now 
		but this can be changed to a user defined one -->
	<!--  <beans:bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />  -->
	  <beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore" >  
      <beans:constructor-arg ref="dataSource"></beans:constructor-arg>  
     </beans:bean> 
  

	<!-- This is where we defined token based configurations, token validity 
		and other things -->
	<beans:bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<beans:property name="tokenStore" ref="tokenStore" />
		<beans:property name="supportRefreshToken" value="true" />
		<beans:property name="accessTokenValiditySeconds" value="86400" />
		<beans:property name="clientDetailsService" ref="clientDetails" />
	</beans:bean>

	<oauth:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		><!-- user-approval-handler-ref="userApprovalHandler" -->
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter"
		resource-id="test" token-services-ref="tokenServices" />

	<oauth:client-details-service id="clientDetails">
		<!-- client -->
		<oauth:client client-id="restapp"
			authorized-grant-types="authorization_code,client_credentials"
			authorities="ROLE_APP" scope="read,write,trust" secret="secret" />

		<oauth:client client-id="restapp"
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			secret="restapp" authorities="ROLE_APP" />

	</oauth:client-details-service>

	<global-method-security
		pre-post-annotations="enabled" proxy-target-class="true">
		<!--you could also wire in the expression handler up at the layer of the 
			http filters. See https://jira.springsource.org/browse/SEC-1452 -->
		<expression-handler ref="oauthExpressionHandler" />
	</global-method-security>

	<oauth:expression-handler id="oauthExpressionHandler" />
	<oauth:web-expression-handler id="oauthWebExpressionHandler" />
</beans:beans>
